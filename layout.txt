/!\ comment faire pour qu'un utilisateur puisse poster une image
/!\ ajouter un moyen d'avoir des modérateurs, qui pourront supprimer des posts ou commentaires
/!\ utiliser le plugin helmet pour éviter les attaque XSS
/!\ si en fait, faut que je fasse des posts qu'avec du texte ou qu'avec une image


/login
toujours la première page quand on ouvre l'app
champs: [email, mot de passe]
>backend: pareil que P6 avec token
header avec logo et 2 icones: login et signup
petit mot au bas de la page qui renvoit vers signup
renvoie vers acceuil

BACKEND: sauvegarder le token dans un cookie??????
        API:/auth/login

MODEL: User:{
    id: générer par MySQL
    prénom
    nom
    email
    mot-de-passe
}
relation de un à plusieurs avec les posts et les comments

/signup
champs: [prénom, nom, email, mot de passe]
>backend: pareil que P6, et si validé, directement login
même dispo, sauf le petit mot qui renvoie vers login
vérifier unicité de l'email directement avec des fonction, où soit, avant de valider le form on vérifie si l'email est déjà utilisé, soit, eventlistener sur le champ on change et on verifie à chaque fois
Ajouter, sous le champ de l'email, qu'on ne peut utiliser un email qu'une seule fois

BACKEND: API:/auth/signup

/posts?page=:page
header logo à gauche, à droite icone de quitter et icone + entouré d'un cercle pour passer sur la page de création de post
main colonne, avec les post afficher dans l'ordre du plus récent
chaque post a le nom du créateur puis doit avoir un titre, et un body qui contient soit une image, soit du texte, ou les deux, et en bas à gauche [like, dislike] et la date du post
quand on clique sur le poste, on est dirigé vers une page spécifique par post /post?id=:id
on limite le nombre de posts affiché par page


BACKEND: pour récupérer le prénom: API:/users/:id (id récupéré dans le cookie avec le token)
        pour récupérer et poster les posts API:/posts


quand il n'y a pas d'image, mettre imageUrl = null, imageAlt = null, et pas de texte, text = null
MODEL: POST: {
    id: généré par MySQL
    titre
    text:
    imageUrl
    imageAlt 
    like: int
    dislike
    grin
    angry 
    heart
    meh
    sad
    usersLike: array avec userID des utilisateur qui ont réagis (TEXT)
    usersDislike
    ...
    userID: userID de la personne qui a fait le post
    date (DATETIME 'AAAA-MM-JJ HH:MM:SS')
}
relation de un à plusieurs avec les users et comments

/post/:id
On a le titre en haut
puis le body
les interactions et le nom
si c'est notre propre post, des boutons supprimer
puis les commentaires trier par ordre du plus ancien

les commentaires:
on espace avec un com blank où quand on ajoute, ça refresh la page????
nom de la personne qui a commenter
le message (uniquement du texte)
les réactions
et si c'est la personne qui a écrit le texte, un bouton supprimer et modifier


BACKEND: récupérer le post API:/posts/:id
        récupérer les commentaires API:/posts/:id/comments

MODEL: COMMENT: {
    id: généré par MySQL
    userID: id du user qui a écrit le comment
    postID: id du post auquel il se rapporte
    text:
    réactions
    array des user qui ont réagis
    date (DATETIME 'AAAA-MM-JJ HH:MM:SS')
}
relation de un à plusieurs vers user et post

/post/new
juste blank page avec form et tout

-on peut modifier et les posts, et les comments
-avoir currentUserId dans le data global????
-avoir la function de login dans le data globale pour l'uitiliser après le signup (elle renvoie systématiquement vers la page posts)
-lorsque qu'on modifie une image, demander à changer l'imageAlt
-vérifier si un path peut avoir 2 routes
-vérifier comment les components s'affichent après un update à un comment/post